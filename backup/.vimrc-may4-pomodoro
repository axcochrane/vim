"=========================================="General Guidelines for assigning shortcuts
"==========================================
" Primary key: reserved  for instinctive actions e.g. navigation
" Leader key: reserverd for very common alt uses e.g. jump lines
" Comma leader: reserved for text snippet e.g. ,rspec ,req
" functions: should be called via command e.g. :accordion
"
"===================================== 
"  Vim Dependencies and Required paths     
"===================================== 
set rtp+=~/.vim/bundle/Vundle.vim 
set rtp+=/usr/local/opt/fzf 
filetype on 
filetype plugin on
filetype indent on
set path+=**
set noreadonly
set autochdir
set nocompatible 


"===================================== 
" Vundle Plugins        								  
"===================================== 
call vundle#begin()
	Plugin 'gmarik/Vundle.vim'
	Plugin 'tpope/vim-rails'
	Plugin 'vim-ruby/vim-ruby'
	Plugin 'tpope/vim-surround'
	Plugin 'tpope/vim-commentary'
	Plugin 'townk/vim-autoclose'
	Plugin 'MarcWeber/vim-addon-mw-utils'
	Plugin 'junegunn/fzf'
	Plugin 'junegunn/fzf.vim'
	Plugin 'thoughtbot/vim-rspec'
	Plugin 'mileszs/ack.vim'
	Plugin 'tpope/vim-repeat'
	Plugin 'tpope/vim-abolish'
	Plugin 'simeji/winresizer'
	Plugin 'preservim/nerdtree'
	Plugin 'dbakker/vim-projectroot'
	Plugin 'rainerborene/vim-reek'
	Plugin 'justinmk/vim-sneak'
	Plugin 'tomtom/tlib_vim'
	Plugin 'tpope/vim-fugitive'
	Plugin 'tpope/vim-endwise'         " enables autocompletion of
	Plugin 'christoomey/vim-rfactory'	 " Enables RFactory shortcuts to access Rails Factory objects
	Plugin 'l04m33/vim-skuld'          " Pomodoro Timer
call vundle#end()										 " required
filetype plugin indent on						 " required

 
"===================================== 
" Vim Snippets and Autocomplete					  
"===================================== 
" we will use the inbuld Vim autocomplete tools <c-x> <c-n> 
" FYI this has been mapped to <cr><cr> see utilities for more info

	
"===================================== 
" Common Shortcut Setings								  
"===================================== 
let mapleader = "\<Space>"
set timeoutlen=700 ttimeoutlen=-1
nnoremap S :w!<Cr>
nnoremap Q @@
nnoremap <leader><leader> :


"===================================== 
" Tab and alignment settings     								  
"===================================== 
set autoindent
set tabstop=2 "This changes how big tab spaces appear"
set softtabstop=2
set shiftwidth=2 "This controls the width of >> shortcut"
set numberwidth=4
set laststatus=2
set notitle
set number
set tags=./tags;
set nowrap

 
"===================================== 
"  Basic Appearance Settings						  
"===================================== 
syntax on             " Enable syntax highlighting
colorscheme monokai
set relativenumber
set lazyredraw  
set nohidden


"===================================== 
"  Navigation Shortcuts  								  
"===================================== 
nnoremap <c-J> <C-W><C-J>    
nnoremap <c-K> <C-W><C-K>
nnoremap <c-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap K 5k5<c-y>
nnoremap J 5j5<c-e>
nnoremap <leader>q q
nnoremap q b


"===================================== 
"  Editing Shorcuts  								  
"===================================== 
nnoremap <Leader>o o<Esc>
set bs=2														 " Enable Backspace key as delete
inoremap ,, <Esc>Ea
inoremap <CR><CR> <c-x><c-n>


"===================================== 
"  Sneak Plugin Shortcut                   
"===================================== 
" 2-character Sneak (default)
map s <Plug>Sneak_s
map <Leader>s <Plug>Sneak_S
map t <Plug>Sneak_t
map T <Plug>Sneak_T
" visual-mode
xmap s <Plug>Sneak_s
xmap <Leader>S <Plug>Sneak_S
xmap t <Plug>Sneak_t
set ignorecase
set incsearch
let g:sneak#reset=0
let g:sneak#use_ic_scs = 1


"===================================== 
"  Utilities Shortcuts  								  
"===================================== 
noremap <leader>r :! cd ~/Enlist_rails && spring rspec %:p -f d <Cr>
noremap <leader>p :ProjectRootCD<Cr>:FZF<Cr>

" Run using double :: as leader key
cnoremap :source :source ~/.vimrc<Cr>
cnoremap :bar call StatusLineCycle()<Cr>
cnoremap :info <esc><S-k>
cnoremap :acc call Accordion()<Cr>
cnoremap :min0 let minimal_mode = 0<Cr>
cnoremap :min1 let minimal_mode = 1<Cr>
cnoremap :reek :RunReek<Cr>
cnoremap :show :call ShowSpaces()<Cr>
cnoremap :trim :call TrimSpaces()<Cr>
cnoremap :search Ack -i   ~/enlist_rails <Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>


nnoremap <leader><leader>source :source ~/.vimrc<Cr>
nnoremap <leader><leader>bar :call StatusLineCycle()<Cr>
nnoremap <leader><leader>info <esc><S-k>
nnoremap <leader><leader>acc :call Accordion()<Cr>
nnoremap <leader><leader>min0 :let minimal_mode = 0<Cr>
nnoremap <leader><leader>min1 :let minimal_mode = 1<Cr>
nnoremap <leader><leader>reek :RunReek<Cr>
nnoremap <leader><leader>show :call ShowSpaces()<Cr>
nnoremap <leader><leader>trim :call TrimSpaces()<Cr>
nnoremap <leader><leader>search :Ack -i   ~/enlist_rails <Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>


"==========================================
" Custom RSpec Block Snippets
"==========================================
nnoremap ,rspec :-1read $HOME/.vim/snippets/rspec_snippet.html<CR>
nnoremap ,context :-1read $HOME/.vim/snippets/context_snippet.html<CR>
nnoremap ,describe :-1read $HOME/.vim/snippets/describe_snippet.html<CR>
nnoremap ,feature :-1read $HOME/.vim/snippets/rspec_feature_snippet.html<CR>
inoremap ,rspec <Esc>:-1read $HOME/.vim/snippets/rspec_snippet.html<CR>
inoremap ,context <Esc>:-1read $HOME/.vim/snippets/context_snippet.html<CR>
inoremap ,describe <Esc>:-1read $HOME/.vim/snippets/describe_snippet.html<CR>
inoremap ,feature <Esc>:-1read $HOME/.vim/snippets/rspec_feature_snippet.html<CR>
inoremap ,factory <Esc>:-1read $HOME/.vim/snippets/factory_snippet.html<CR>
nnoremap ,factory <Esc>:-1read $HOME/.vim/snippets/factory_snippet.html<CR>
inoremap ,req require ''<left>
nnoremap ,req irequire ''<left>


"==========================================
" Highlight inbetween parens
"==========================================
inoremap ''<CR> <Esc>/''<CR>a
nnoremap ''<CR> <Esc>/''<CR>a
inoremap ]]<CR> <Esc>/]<CR>vi]
nnoremap ]]<CR> <Esc>/]<CR>vi]
inoremap ))<CR> <Esc>/)<CR>vi)
nnoremap ))<CR> <Esc>/)<CR>vi)
inoremap }}<CR> <Esc>/}<CR>vi}
nnoremap }}<CR> <Esc>/}<CR>vi}
inoremap [[<CR> <Esc>/[<CR>vi[
nnoremap [[<CR> <Esc>/[<CR>vi]
inoremap ((<CR> <Esc>/(<CR>vi(
nnoremap ((<CR> <Esc>/(<CR>vi(
inoremap {{<CR> <Esc>/{<CR>vi{
nnoremap {{<CR> <Esc>/{<CR>vi{


"==========================================
" RSpec Custom Block Snippets
"==========================================
inoremap spec<cr> <Esc>ddoRSpec.describe '' do<CR>end<Esc><up><Esc>f'a
inoremap specf<Cr> <Esc>ddoRSpec.feature '' do<CR>end<Esc><up><Esc>f'a
nnoremap spec<cr> <Esc>ddoRSpec.describe '' do<CR>end<Esc><up><Esc>f'a
nnoremap specf<Cr> <Esc>ddoRSpec.feature '' do<CR>end<Esc><up><Esc>f'a
inoremap describe<cr> describe '' do<CR>end<Esc><up><Esc>f'a
nnoremap describe<Cr> describe '' do<CR>end<Esc><up><Esc>f'a
inoremap context<cr> context '' do<CR>end<Esc><up><Esc>f'a
nnoremap context<Cr> context '' do<CR>end<Esc><up><Esc>f'a
inoremap scenario<cr> scenario '' do<CR>end<Esc><up><Esc>f'a
nnoremap scenario<Cr> scenario '' do<CR>end<Esc><up><Esc>f'a
inoremap feature<cr> feature '' do<CR>end<Esc><up><Esc>f'a
nnoremap feature<Cr> feature '' do<CR>end<Esc><up><Esc>f'a
inoremap it<cr> it '' do<CR>end<Esc><up><Esc>f'a
nnoremap it<Cr> it '' do<CR>end<Esc><up><Esc>f'a


"#####################################
"#####################################
"###### BELOW HERE IS FUNCTIONS ######
"#####################################
"#####################################


"===================================== 
" Custom Accordion Window Arrangement      
"===================================== 
let g:accordion = 0
let g:minimal_mode = 0
function! Accordion()
	  if g:accordion  == 0
		let g:minimal_mode = 0
		let &winheight = (&lines *  100 / 100) + 1
		let &winwidth = (&columns * 100 / 100) + 1
		let g:accordion = 1
		echo 'Accordion:1'
	elseif g:accordion == 1
		let g:minimal_mode = 0
		let &winheight = &lines *  100 / 100
		let &winwidth = &columns * 50 / 100
		let NERDTreeWinSize=30
		let g:accordion = 2
		echo 'Accordion:2'
	elseif g:accordion == 2
		let g:minimal_mode = 1
		let &winheight = &lines *  100 / 100
		let &winwidth = &columns * 33 / 100
		let NERDTreeWinSize=30
		let g:accordion = 3
		echo 'Accordion:3'
	elseif g:accordion == 3
		let g:minimal_mode = 1
		let &winheight = 0
		let &winwidth = 0
		let NERDTreeWinSize=30
		let g:accordion = 0
		echo 'Accordion:4'
	else
	endif
endfunction


"========================================
"  TrimSpace command line function       
"========================================
function ShowSpaces(...)
	let @/='\v(\s+$)|( +\ze\t)'
	let oldhlsearch=&hlsearch
	if !a:0
		let &hlsearch=!&hlsearch
	else
		let &hlsearch=a:1
	end
	return oldhlsearch
endfunction

function TrimSpaces() range
	let oldhlsearch=ShowSpaces(1)
	execute a:firstline.",".a:lastline."substitute ///gec"
	let &hlsearch=oldhlsearch
endfunction


"========================================
"  NERDTree Settings                     
"========================================
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif 
let g:NERDTreeBookmarksFile = $HOME ."/.vim/bundle/nerdtree/bookmarks" "existing path to bookmark
let NERDTreeQuitOnOpen = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 0
hi Directory ctermfg=DarkGrey
hi NERDTreeOpenable ctermfg=236  cterm=NONE 
hi NERDTreeClosable ctermfg=Yellow
let NERDTreeOpenable='  '
let NERDTreeDelimiter='  '
hi NERDTreeNodeDelimiter ctermfg=DarkGrey
hi NERDTreeCWD ctermfg=DarkGrey
hi NERDTreePath ctermfg=Red
hi NERDTreeDirNode ctermfg=Blue
hi NERDTreeFileNode ctermfg=Green
let NERDTreeAutoCenter=1 
let NERDTreeAutoCenterThreshold=5
let NERDTreeShowLineNumbers=1
nnoremap <Leader>nt :NERDTree ~/enlist_rails<Cr> 
nnoremap <Leader>nd :NERDTreeToggle<Cr>

"===================================== 
" Toggle Statusline Function							  
"===================================== 
let b:hidden_all = 0
let g:status_line_default_mode = get(g:, 'status_line_default_mode', 'shown')
let g:status_line_mode = get(g:, 'status_line_mode', 'shown')

function StatusLineCycle()
	let g:status_line_mode = get(g:, 'status_line_mode', 'shown')
	if g:status_line_mode == 'shown' | call StatusLineHide()
	elseif g:status_line_mode == 'pomodoro' | call StatusLineDefault()
	elseif g:status_line_mode == 'hidden' | call StatusLinePomodoro()
	else | call StatusLineDefault()
	endif
endfunction

function StatusLineDefault()
	let g:status_line_default_mode = get(g:, 'status_line_default_mode', 'shown')
	if g:status_line_default_mode == 'amber' | call StatusLineAmber()
	elseif g:status_line_default_mode == 'shown' | call StatusLineShow()
	endif
endfunction

function StatusLineHide()
	let g:status_line_mode = 'hidden'
	set noshowmode
	set noruler
	set laststatus=0
	set noshowcmd
	hi StatusLine ctermbg=NONE ctermfg=40
	hi StatusLineNC ctermbg=NONE ctermfg=Red
	set fillchars=stlnc:=
	set showtabline=0
	highlight EndOfBuffer ctermbg=NONE ctermfg=236
endfunction

function StatusLineShow()
	let g:status_line_mode = 'shown'
	set showmode
	set noruler
	set showcmd
	set laststatus=1
	set showtabline=1
	hi VertSplit ctermbg=NONE ctermfg=DarkGrey
	hi TabLineFill ctermfg=NONE ctermbg=NONE cterm=NONE
	hi TabLine ctermfg=NONE ctermbg=NONE cterm=NONE
	hi TabLineSel ctermfg=yellow ctermbg=NONE cterm=NONE
	hi StatusLine ctermbg=NONE ctermfg=40
	hi StatusLineNC ctermbg=NONE ctermfg=red
	hi EndOfBuffer ctermbg=NONE
	let &statusline='===== %t'
	set fillchars=stl:=
	set fillchars+=vert:│
	set fillchars+=stlnc:=
endfunction

function StatusLineAmber()
	let g:status_line_default_mode = 'amber'
	let g:status_line_mode = 'shown'
	set showmode
	set ruler
	set showcmd
	set laststatus=1
	set showtabline=1
	hi VertSplit ctermbg=NONE ctermfg=DarkGrey
	hi TabLineFill ctermfg=NONE ctermbg=NONE cterm=NONE
	hi TabLine ctermfg=NONE ctermbg=NONE cterm=NONE
	hi TabLineSel ctermfg=yellow ctermbg=NONE cterm=NONE
	hi StatusLine ctermbg=NONE ctermfg=220
	hi StatusLineNC ctermbg=NONE ctermfg=229
	let &statusline='=====%t %m%y'
	set fillchars=stl:=
	set fillchars+=vert:│
	set fillchars+=stlnc:=
endfunction

function StatusLinePomodoro()
	call StatusLineDefault()
	let g:status_line_mode = 'pomodoro'
	let tally = '[' . g:pomodoro_tally . ']'
	let &statusline = '=====%t %m%y' . tally
endfunction

"========================================
"  Minimal Mode                          
"========================================
set cursorline
highlight LineNr term=NONE cterm=NONE ctermfg=DarkGrey ctermbg=NONE
highlight CursorLineNr term=NONE cterm=bold ctermfg=Yellow 

highlight CursorLine ctermbg=NONE ctermfg=NONE
highlight Cursor ctermbg=Yellow ctermfg=NONE
autocmd InsertEnter * highlight CursorLine ctermbg=17 ctermfg=NONE
autocmd InsertLeave * highlight CursorLine ctermbg=NONE ctermfg=NONE
 
function CheckForBlankLine()
	let line = getline(".")
	if line =~ '^\s*$'
		normal dd
		normal k
	elseif line=~ '^["\w]$'
		normal dd
		normal k
	elseif line=~ '^[\w"]$'
		normal dd
		normal k
	elseif line=~ '^[#\w]$'
		normal dd
		normal k
	elseif line=~ '^[\w#]$'
	endif
endfunction

function SetCursorLine()
	if g:minimal_mode == 1
		setlocal cursorline
		highlight CursorLineNr ctermfg=Yellow
		setlocal number
		setlocal relativenumber
		highlight LineNr term=NONE ctermfg=DarkGrey
	elseif g:minimal_mode == 0
	endif
endfunction

function SetNoCursorLine()
	if g:minimal_mode == 1
		setlocal nocursorline
		setlocal nonumber
		setlocal norelativenumber
	elseif g:minimal_mode == 0
	endif
endfunction

function EnterBlankLine()
	if g:minimal_mode == 1
		normal o
		normal C
	elseif g:minimal_mode ==0
	endif
endfunction

augroup win_enter
	autocmd!
		autocmd WinEnter * call SetCursorLine()
		autocmd BufEnter * call CheckForBlankLine()
augroup END
 
augroup win_leave
	autocmd!
		autocmd WinLeave * call SetNoCursorLine() 
		autocmd BufLeave * call EnterBlankLine() 
augroup END

"========================================
"  Custom Jump Navigation Mapping        
"========================================
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
nnoremap zz zz<c-e><c-e><c-e>

nnoremap <leader>a<leader> j
nnoremap <leader>s<leader> :+2<Cr>
nnoremap <leader>d<leader> :+3<Cr>
nnoremap <leader>f<leader> :+4<Cr>
nnoremap <leader>g<leader> :+5<Cr>
nnoremap <leader>h<leader> :+6<Cr>
nnoremap <leader>j<leader> :+7<Cr>
nnoremap <leader>k<leader> :+8<Cr>
nnoremap <leader>l<leader> :+9<Cr>
nnoremap <leader>;<leader> :+10<Cr>
nnoremap <leader>a;<leader> :+10<Cr>
nnoremap <leader>aa<leader> :+11<Cr>
nnoremap <leader>as<leader> :+12<Cr>
nnoremap <leader>ad<leader> :+13<Cr>
nnoremap <leader>af<leader> :+14<Cr>
nnoremap <leader>ag<leader> :+15<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>ah<leader> :+16<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>aj<leader> :+17<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>ak<leader> :+18<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>al<leader> :+19<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>s;<leader> :+20<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>sa<leader> :+21<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>ss<leader> :+22<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>sd<leader> :+23<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>sf<leader> :+24<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>sg<leader> :+25<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>sh<leader> :+26<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>sj<leader> :+27<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>sk<leader> :+28<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>sl<leader> :+29<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader>d;<leader> :+30<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>a k
nnoremap <leader><leader>s<leader> :-2<Cr>
nnoremap <leader><leader>d<leader> :-3<Cr>
nnoremap <leader><leader>f<leader> :-4<Cr>
nnoremap <leader><leader>g<leader> :-5<Cr>
nnoremap <leader><leader>h<leader> :-6<Cr>
nnoremap <leader><leader>j<leader> :-7<Cr>
nnoremap <leader><leader>k<leader> :-8<Cr>
nnoremap <leader><leader>l<leader> :-9<Cr>
nnoremap <leader><leader>;<leader> :-10<Cr>
nnoremap <leader><leader>a;<leader> :-10<Cr>
nnoremap <leader><leader>aa<leader> :-11<Cr>
nnoremap <leader><leader>as<leader> :-12<Cr>
nnoremap <leader><leader>ad<leader> :-13<Cr>
nnoremap <leader><leader>af<leader> :-14<Cr>
nnoremap <leader><leader>ag<leader> :-15<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>ah<leader> :-16<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>aj<leader> :-17<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>ak<leader> :-18<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>al<leader> :-19<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>s;<leader> :-20<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>sa<leader> :-21<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>ss<leader> :-22<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>sd<leader> :-23<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>sf<leader> :-24<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>sg<leader> :-25<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>sh<leader> :-26<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>sj<leader> :-27<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>sk<leader> :-28<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>sl<leader> :-29<Cr>zz<c-e><c-e><c-e><c-e>
nnoremap <leader><leader>d;<leader> :-30<Cr>zz<c-e><c-e><c-e><c-e>

"==========================================
" Quickfix Shortcuts
"==========================================
" When using `dd` in the quickfix list, remove the item from the quickfix list.
function! RemoveQFItem()
  let curqfidx = line('.') - 1
  let qfall = getqflist()
  call remove(qfall, curqfidx)
  call setqflist(qfall, 'r')
  execute curqfidx + 1 . "cfirst"
  :copen
endfunction
:command! RemoveQFItem :call RemoveQFItem()
" Use map <buffer> to only map dd in the quickfix window. Requires +localmap
autocmd FileType qf map <buffer> dd :RemoveQFItem<cr>


"==========================================
" Pomodoro Timer PlugIn
"==========================================
"### API ###
let g:pomodoro_status = get(g:, 'pomodoro_status', 'Inactive')
let g:pomodoro_round_size = get(g:, 'pomodoro_round_size', 4)
let g:pomodoro_round_count = get(g:, 'pomodoro_round_count', 1)
let g:pomodoro_session_count = get(g:, 'pomodoro_session_count', 0)
let g:pomodoro_alltime_count = get(g:, 'pomodoro_alltime_count', 0)
let g:pomodoro_pause_time = get(g:, 'pomodoro_pause_time', 2400000)
let g:pomodoro_stopped_time = get(g:, 'pomodoro_stoppped_time', 2400000)
let g:pomodoro_long_break = get(g:, 'pomodoro_long_break', 1500000)
let g:pomodoro_short_break = get(g:, 'pomodoro_short_break', 300000)
let g:pomodoro_length = get(g:, 'pomodoro_length', 2400000)
let g:pomodoro_tally = get(g:, 'pomodoro_tally', '')

cnoremap :poms :call PomodoroStatus()<Cr>
cnoremap :pomi :call PomodoroInfo()<Cr>
cnoremap :pomc :call PomodoroCounters()<Cr>
cnoremap :pomt :call PomodoroTask()<Cr>
cnoremap :poml :call PomodoroLog()<Cr>
cnoremap :skip :call PomodoroSkip()<Cr>
cnoremap :task :call PomodoroTask('')<left><left>
cnoremap :pause :call PomodoroPause()<Cr>
nnoremap <leader><leader>poms :call PomodoroStatus()<Cr>
nnoremap <leader><leader>pomi :call PomodoroInfo()<Cr>
nnoremap <leader><leader>pomc :call PomodoroCcunters()<Cr>
nnoremap <leader><leader>pomt :call PomodoroTask()<Cr>
nnoremap <leader><leader>poml :call PomodoroLog()<Cr>
nnoremap <leader><leader>skip :call PomodoroSkipBreak()<Cr>
nnoremap <leader><leader>task :call PomodoroRecordTask('')<left><left>
nnoremap <leader><leader>pause :call PomodoroPause()<cr>

"### Public Functions: Open Files ###
function PomodoroTask(...)
	:vert botright split ~/.vim/task_list
endfunction

function PomodoroLog(...)
	:vert botright split ~/.vim/task_log
endfunction

"### Public Functions: Pomodoro ###
function PomodoroClockIn()
	let g:pomodoro_round_count = 0
	let g:pomodoro_session_count = 0
	let g:pomodoro_tally = ''
	let g:pomodoro_status = 'Inactive'
	let g:status_line_mode = 'amber'

	:vert botright split ~/.vim/task_log
	normal! G
	:put =strftime('%a-%d%b%Y  %H%M-XXXX   ')
	normal! A 
	normal ZZ
endfunction

function PomodoroClockOut()
	:vert botright split ~/.vim/task_log
	:put =strftime('%H%M')
	normal! diW"_ddGfXv4lpa 
	normal ZZ
	:execute "normal \<c-w>\<c-w>"
	echo 'Well done you completed ' . g:pomodoro_session_count . ' pomodoros this session'
endfunction

function PomodoroRecordTask(...)
	let task_name = "#" . get(a:, 1, 'unknown_task')
	:vert botright split ~/.vim/task_log
	:put =task_name
	:normal! diW"_ddG$pA 
	normal! G03f-Eldt#i  
	normal ZZ
	echo 'Well done you completed ' . task_name
endfunction

function PomodoroStart(...)
	let time = get(a:, 1, g:pomodoro_length)
	let rounds = get(a:, 2, g:pomodoro_round_size)
	let resumed_from = get(a:, 3, 'none')
	if (g:pomodoro_status == 'Stopped' || resumed_from == 'stoppage')
		let time = g:pomodoro_stopped_time
		let g:pomodoro_status	= 'Resuming stopped pomodoro'
		echo 'Resuming stopped pomodoro with ' . time / 60000 . ' minutes remaining'
	elseif (g:pomodoro_status == 'Paused' || resumed_from == 'pause')
		let time = g:pomodoro_pause_time
		let g:pomodoro_status	= 'Resuming paused pomodoro'
		echo 'Resuming paused pomodoro with ' . time / 60000 . ' minutes remaining'
	else
		let g:pomodoro_status	= 'Working'
		let current_round = g:pomodoro_round_count + 1
		echo time / 60000  . ' minute pomodoro started.  ' .
		(g:pomodoro_round_count + 1) . ' of ' . g:pomodoro_round_size
	endif
	call StatusLineShow()
  call timer_start(time, 'PomodoroComplete')
endfunction

function PomodoroStop(...)
	let g:pomodoro_stopped_time = timer_info()[0]['remaining']
	let time_in_mins = g:pomodoro_stopped_time / 60000
	let g:pomodoro_status	= 'Stopped'
	call timer_stopall()
	echo 'Pomodoro stopped with ' . time_in_mins . ' minutes remaining'
endfunction

function PomodoroPause(...)
	let paused_status = timer_info()[0]['paused']  
	if paused_status == 0 
		let g:paused_timer_id = timer_info()[0]['id']
		let g:pomodoro_pause_time = timer_info()[0]['remaining']
		let g:pomodoro_status	= 'Paused'
		let time_left_in_mins = g:pomodoro_pause_time / 60000
		call timer_pause(g:paused_timer_id, 1)
		call StatusLineAmber()
		echo 'Pomodoro paused with ' . time_left_in_mins . 'mins remaining'
	elseif paused_status == 1 
		let g:pomodoro_pause_time = get(g:, 'pomodoro_pause_time', 2400000)
		call PomodoroStart(g:pomodoro_pause_time, g:pomodoro_round_size, 1)
	else
		echo "Pause function didn't run, perhaps because no timer is active"
	endif 
endfunction

function PomodoroInfo(...)
	echo timer_info()
endfunction	

function PomodoroStatus(...)
	if (g:pomodoro_status == 'Inactive' || g:pomodoro_status == 'Stopped')
		echo "No active timer. Run PomodoroStart() to begin"
	else
		let time_remaining_in_mins = timer_info()[0]['remaining'] / 60000
		let pomodoro_count = g:pomodoro_count 
		echo 
			\	 "COUNTDOWN = " . time_remaining_in_mins . "mins" 
			\ ."             "
			\ ."STATUS = "   . g:pomodoro_status 
			\ ."             "
			\ ."SESSION COUNT = "    . g:pomodoro_session_count
	endif
endfunction

function PomodoroCounters()
		echo 
			\	"ROUND " . g:pomodoro_round_count . " of " . g:pomodoro_round_size
			\ ."             "
			\ ."SESSION = " . g:pomodoro_session_count 
			\ ."             "
			\ ."ALLTIME = " . g:pomodoro_alltime_count
endfunction

"### Private Functions: Pomodoro ###
function PomodoroComplete(...)
	call PomodoroIncreaseCounters(1)
	call PomodoroRecordPom()
	if g:pomodoro_round_count < g:pomodoro_round_size

		call PomodoroShortBreak()
	else
		call PomodoroLongBreak()
		let g:pomodoro_round_count = 1
	endif
endfunction

function PomodoroLongBreak(...)
	let time = get(a:, 1, g:pomodoro_long_break)
	let time_in_mins = time / 60000
	let g:pomodoro_status = 'Long Break'
	:vert botright split ~/.vim/task_log
	normal! G2f,wEa.
	normal ZZ
	:execute "normal \<c-w>\<c-w>"
  call timer_start(time, 'LongBreakComplete')
	call StatusLineAmber()
	echo time_in_mins . ' min break started'
endfunction

function PomodoroShortBreak(...)
	let time = get(a:, 1, g:pomodoro_short_break)
	let time_in_mins = time / 60000
	let g:pomodoro_status = 'Short break'
  call timer_start(time, 'ShortBreakComplete')
	call StatusLineAmber()
	echo time_in_mins . ' min break started'
endfunction
 
function LongBreakComplete(...)
	let timer_id = get(a:, 1, 'Status unknown') 
	call PomodoroRecordBreak()
	echo 'Long break complete'
	call PomodoroStart()
endfunction

function ShortBreakComplete(...)
	let timer_id = get(a:, 1, 'Status unknown') 
	echo 'Short Break Complete'
	call PomodoroStart()
endfunction

function PomodoroRecordPom()
	:vert botright split ~/.vim/task_log
	:execute "normal G4fXa   \<Esc>wdTXviwyviwc   \<esc>pa-\<Esc>\"wdiW\<Esc>\"_dTXi  \<Esc>\"wp"
	let g:pomodoro_tally = g:pomodoro_tally . '-'
	normal! G03f-EwdT-i  
	normal ZZ
	:execute "normal \<c-w>\<c-w>"
endfunction

function PomodoroRecordBreak()
	:vert botright split ~/.vim/task_log
	:execute "normal G4fXa   \<Esc>wdTXviwyviwc   \<esc>pa.\<Esc>\"wdiW\<Esc>\"_dTXi  \<Esc>\"wp"
	let g:pomodoro_tally = g:pomodoro_tally . '.'
	normal! G03f-EwdT.i  
	normal ZZ
	:execute "normal \<c-w>\<c-w>"
endfunction

function PomodoroIncreaseCounters(...)
	let increment = get(a:, 1, 1)
	let g:pomodoro_round_count = g:pomodoro_round_count + increment
	let g:pomodoro_session_count = g:pomodoro_session_count + increment
	let g:pomodoro_alltime_count = g:pomodoro_alltime_count + increment
endfunction

"### Public Functions: Task Manager ###
function TaskAdd()

endfunction
"==========================================
" Function to run on Load
"==========================================
" :call ToggleHiddenAll()
" :call ToggleHiddenAll()
:call StatusLineDefault()
let minimal_mode = 0
